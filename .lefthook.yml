# Lefthook configuration for waitup project
# Fast Git hooks manager written in Go
# Install: https://github.com/evilmartians/lefthook#installation
# Setup: lefthook install

# ===== PRE-COMMIT HOOKS =====
pre-commit:
  parallel: true
  commands:
    # ===== FAST CHECKS (run first) =====
    format-check:
      priority: 1
      glob: "*.rs"
      run: cargo fmt --all -- --check
      stage_fixed: true

    clippy-check:
      priority: 2
      glob: "*.rs"
      run: |
        cargo clippy --all-targets --all-features -- \
          -D warnings \
          -D clippy::pedantic \
          -D clippy::nursery \
          -W clippy::restriction \
          -D clippy::unwrap_used \
          -D clippy::expect_used \
          -D clippy::panic \
          -D clippy::todo \
          -D clippy::unimplemented \
          -W clippy::dbg_macro \
          -W clippy::print_stdout \
          -W clippy::print_stderr

    # ===== CARGO CHECKS =====
    cargo-check:
      priority: 3
      glob: "*.rs"
      run: cargo check --all-targets --all-features

    # ===== TESTS (subset for speed) =====
    test-lib:
      priority: 4
      glob: "src/**/*.rs"
      run: cargo test --lib --all-features

    test-doc:
      priority: 5
      glob: "src/**/*.rs"
      run: cargo test --doc --all-features

    # ===== DOCUMENTATION =====
    doc-check:
      priority: 6
      glob: "src/**/*.rs"
      run: cargo doc --no-deps --all-features --document-private-items

    # ===== SECURITY CHECKS =====
    security-audit:
      priority: 7
      glob: "Cargo.{toml,lock}"
      run: |
        if command -v cargo-audit >/dev/null 2>&1; then
          cargo audit --deny warnings
        else
          echo "‚ö†Ô∏è cargo-audit not installed. Install with: cargo install cargo-audit"
        fi

    license-check:
      priority: 8
      glob: "Cargo.{toml,lock}"
      run: |
        if command -v cargo-deny >/dev/null 2>&1; then
          cargo deny check
        else
          echo "‚ö†Ô∏è cargo-deny not installed. Install with: cargo install cargo-deny"
        fi

    # ===== FILE CHECKS =====
    trailing-whitespace:
      priority: 9
      glob: "*.{rs,toml,yaml,yml,md}"
      run: |
        if grep -l '[[:space:]]$' {staged_files}; then
          echo "‚ùå Files have trailing whitespace"
          exit 1
        fi

    large-files:
      priority: 10
      run: |
        large_files=$(find {staged_files} -size +500k 2>/dev/null || true)
        if [ -n "$large_files" ]; then
          echo "‚ùå Large files detected:"
          echo "$large_files"
          exit 1
        fi

# ===== COMMIT-MSG HOOKS =====
commit-msg:
  commands:
    conventional-commit:
      run: |
        # Check if commit message follows conventional commits format
        if ! grep -qE '^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\(.+\))?: .+' {1}; then
          echo "‚ùå Commit message must follow conventional commits format:"
          echo "   <type>[optional scope]: <description>"
          echo ""
          echo "Types: feat, fix, docs, style, refactor, perf, test, build, ci, chore, revert"
          echo "Example: feat(cli): add JSON output support"
          exit 1
        fi

# ===== PRE-PUSH HOOKS =====
pre-push:
  parallel: true
  commands:
    # ===== COMPREHENSIVE TESTS =====
    test-all:
      priority: 1
      run: cargo test --all-features --workspace

    # ===== INTEGRATION TESTS =====
    test-integration:
      priority: 2
      run: cargo test --test integration_tests

    # ===== EXAMPLES CHECK =====
    examples-check:
      priority: 3
      run: |
        echo "üîß Checking examples compile..."
        cargo check --examples

    # ===== BENCHMARK CHECK =====
    bench-check:
      priority: 4
      run: |
        echo "üèÉ Checking benchmarks compile..."
        if [ -d "benches" ]; then
          cargo check --benches
        else
          echo "No benchmarks to check"
        fi

    # ===== FINAL AUDIT =====
    final-audit:
      priority: 5
      run: |
        echo "üîí Running final security audit..."
        if command -v cargo-audit >/dev/null 2>&1; then
          cargo audit --deny warnings
        fi
        if command -v cargo-deny >/dev/null 2>&1; then
          cargo deny check
        fi

# ===== GLOBAL SETTINGS =====
min_version: 1.5.0

# Skip hooks in certain cases
skip_output:
  - meta
  - summary

# Colors for output
colors: true
# Source hooks from other files
# source_dir: .lefthook

# Remote configuration (for shared team settings)
# remote:
#   git_url: https://github.com/grok-rs/lefthook-config
#   ref: main
#   configs:
#     - rust-project.yml
