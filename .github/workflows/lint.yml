name: Lint

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"

jobs:
  format-check:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Check formatting
        run: cargo fmt --all -- --check

  clippy-reasonable:
    name: Clippy (Reasonable)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-clippy-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-clippy-

      - name: Run Clippy with reasonable lints
        run: |
          cargo clippy --all-targets --all-features -- \
            -D warnings \
            -D clippy::correctness \
            -D clippy::suspicious \
            -D clippy::complexity \
            -D clippy::perf \
            -D clippy::style \
            -D clippy::pedantic \
            -D clippy::nursery \
            -D clippy::unwrap_used \
            -D clippy::expect_used \
            -D clippy::panic \
            -W clippy::todo \
            -W clippy::unimplemented \
            -W clippy::dbg_macro \
            -A clippy::missing_errors_doc \
            -A clippy::missing_panics_doc \
            -A clippy::module_name_repetitions \
            -A clippy::similar_names \
            -A clippy::too_many_lines \
            -A clippy::cast_precision_loss \
            -A clippy::cast_possible_truncation \
            -A clippy::cast_sign_loss \
            -A clippy::must_use_candidate \
            -A clippy::multiple_crate_versions

  clippy-strict-optional:
    name: Clippy (Strict - Optional)
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't fail CI, but show warnings
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-clippy-strict-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-clippy-strict-

      - name: Run Clippy with strict lints (warnings only)
        run: |
          echo "üîç Running additional strict clippy checks (informational only)"
          cargo clippy --all-targets --all-features -- \
            -W clippy::pedantic \
            -W clippy::nursery \
            -W clippy::cargo \
            -W clippy::restriction \
            -A clippy::blanket_clippy_restriction_lints \
            -A clippy::implicit_return \
            -A clippy::missing_docs_in_private_items \
            -A clippy::exhaustive_structs \
            -A clippy::exhaustive_enums \
            -A clippy::module_name_repetitions \
            -A clippy::single_call_fn \
            -A clippy::question_mark_used \
            -A clippy::std_instead_of_alloc \
            -A clippy::std_instead_of_core \
            -A clippy::missing_inline_in_public_items \
            -A clippy::pub_use \
            -A clippy::multiple_crate_versions \
            -A clippy::cargo_common_metadata \
            -A clippy::else_if_without_else \
            -A clippy::non_ascii_literal \
            || echo "‚ö†Ô∏è  Strict clippy checks found suggestions (non-blocking)"

  documentation-lint:
    name: Documentation Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-doc-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-doc-

      - name: Check documentation (public APIs only)
        run: |
          RUSTDOCFLAGS="-D warnings -D rustdoc::broken_intra_doc_links -D rustdoc::private_intra_doc_links" \
          cargo doc --all-features --no-deps

      - name: Test documentation examples
        run: cargo test --doc --all-features

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo-audit
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-audit
          key: ${{ runner.os }}-cargo-audit-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-cargo-audit-

      - name: Install cargo-audit
        run: |
          if ! command -v cargo-audit &> /dev/null; then
            cargo install cargo-audit --locked
          fi

      - name: Run security audit
        run: cargo audit

  license-check:
    name: License Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo-deny
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-deny
          key: ${{ runner.os }}-cargo-deny-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-cargo-deny-

      - name: Install cargo-deny
        run: |
          if ! command -v cargo-deny &> /dev/null; then
            cargo install cargo-deny --locked
          fi

      - name: Run license and dependency check
        run: cargo deny check licenses

  unused-dependencies:
    name: Unused Dependencies
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't fail CI, but show warnings
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo-machete
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-machete
          key: ${{ runner.os }}-cargo-machete-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-cargo-machete-

      - name: Install cargo-machete
        run: |
          if ! command -v cargo-machete &> /dev/null; then
            cargo install cargo-machete --locked
          fi

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-machete-deps-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-machete-deps-

      - name: Check for unused dependencies
        run: |
          echo "üîç Checking for unused dependencies (informational only)"
          cargo machete || echo "‚ö†Ô∏è  Found unused dependencies (non-blocking)"

  lint-summary:
    name: Lint Summary
    runs-on: ubuntu-latest
    needs:
      [
        format-check,
        clippy-reasonable,
        documentation-lint,
        security-audit,
        license-check,
      ]
    if: always()
    steps:
      - name: Check required lint jobs
        run: |
          if [[ "${{ needs.format-check.result }}" == "failure" ]] || \
             [[ "${{ needs.clippy-reasonable.result }}" == "failure" ]] || \
             [[ "${{ needs.documentation-lint.result }}" == "failure" ]] || \
             [[ "${{ needs.security-audit.result }}" == "failure" ]] || \
             [[ "${{ needs.license-check.result }}" == "failure" ]]; then
            echo "‚ùå One or more required lint checks failed"
            exit 1
          else
            echo "‚úÖ All required lint checks passed"
          fi
